package com.gmoney.programmers.devMatching_20220402;

/**
 * 두 송전탑 A, B 사이에 전력을 공급하기 위한 송전 선로를 연결하려 합니다. 송전탑과 송전 선로는 그래프 형태로 표현이 가능하며, 각 노드는 송전탑, 송전탑과 송전탑을 연결하는 간선은 송전 선로를 나타냅니다. 모든 송전 선로(간선)의 가중치는 1 입니다. 당신은 아래 규칙을 지키며 송전 선로를 적절히 선택하여 A 송전탑에서 B 송전탑까지 연결하는 경로를 만들려 합니다.
 *
 * 해당 경로에 포함되는 송전 선로의 가중치 합이 k 이하여야 합니다.
 * 같은 송전탑을 두 번 이상 지나면 안됩니다.
 * 다음은 송전탑 8개와 각 송전탑을 연결하는 송전 선로가 주어진 예시입니다.
 * A 송전탑(0번 노드)에서 B 송전탑(3번 노드)으로 가는 경로에 포함된 송전 선로의 가중치 합은 4 이하여야 합니다(k = 4).
 *
 * trans_edge_1.png
 *
 * A 송전탑에서 B 송전탑까지 연결하는 경로 중 가중치 합이 4 이하인 경로는 다음과 같습니다.
 *
 * trans_edge_2.png
 *
 * 0번 - 1번 - 2번 - 3번
 * 0번 - 1번 - 6번 - 7번 - 3번
 * 0번 - 1번 - 2번 - 7번 - 3번
 * 이때, 0번 - 4번, 1번 - 5번, 4번 - 5번, 5번 - 6번 송전탑을 연결하는 송전 선로는 가중치 합이 4 이하가 되도록 하는 경로에 한 번도 포함되지 않았습니다.
 *
 * trans_edge_3.png
 *
 * 예를 들어 5번 - 6번 선로를 경로에 포함한다면 위 그림과 같이 어떤 경로를 선택하더라도 가중치 합이 항상 4보다 큽니다.
 * 따라서 5번 - 6번 선로는 가중치 합이 4 이하가 되도록하는 경로에 절대로 포함되지 않습니다.
 * 가중치 합이 4 이하인 경로에 절대로 포함되지 않는 송전 선로를 모두 제거하면 다음 그림과 같습니다.
 *
 * trans_edge_4.png
 *
 * 따라서 위 예시의 경우 A 송전탑에서 B 송전탑까지 가중치 합이 k 이하인 경로에 포함되지 않는 송전 선로를 모두 제거한 뒤 남은 송전 선로는 7개입니다.
 *
 * 전체 송전탑 수를 나타내는 정수 n, 송전 선로 정보가 담긴 2차원 정수 배열 edges, 가중치를 나타내는 정수 k, A 송전탑의 노드 번호를 나타내는 정수 a, B 송전탑의 노드 번호를 나타내는 정수 b가 매개변수로 주어집니다.
 * A 송전탑에서 B 송전탑까지 가중치 합이 k 이하인 경로에 포함되지 않는 송전 선로를 모두 제거한 뒤 남은 송전 선로는 몇 개인지 return 하도록 solution 함수를 완성해주세요.
 */

public class DevMatching_3 {
    public static void main(String[] args) {
        System.out.println(                     // 7
                solution(8, new int[][]{{0,1},{1,2},{2,3},{4,0},{5,1},{6,1},{7,2},{7,3},{4,5},{5,6},{6,7}}, 4, 0, 3));
    }

    public static int solution(int n, int[][] edges, int k, int a, int b) {
        int answer = -1;
        return answer;
    }
}
